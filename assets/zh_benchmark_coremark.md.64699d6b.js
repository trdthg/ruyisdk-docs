import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.87cee98a.js";const d=JSON.parse('{"title":"运行 Coremark","description":"","frontmatter":{},"headers":[],"relativePath":"zh/benchmark/coremark.md","filePath":"zh/benchmark/coremark.md","lastUpdated":1701834757000}'),l={name:"zh/benchmark/coremark.md"},p=n(`<h1 id="运行-coremark" tabindex="-1">运行 Coremark <a class="header-anchor" href="#运行-coremark" aria-label="Permalink to &quot;运行 Coremark&quot;">​</a></h1><p>这里我们从零开始，安装 ruyisdk 并编译运行 Coremark。这里我们介绍使用 ruyi 交叉编译 Coremark 的步骤。</p><h2 id="安装-ruyi" tabindex="-1">安装 ruyi <a class="header-anchor" href="#安装-ruyi" aria-label="Permalink to &quot;安装 ruyi&quot;">​</a></h2><h2 id="下载工具链" tabindex="-1">下载工具链 <a class="header-anchor" href="#下载工具链" aria-label="Permalink to &quot;下载工具链&quot;">​</a></h2><h2 id="交叉编译-coremark" tabindex="-1">交叉编译 Coremark <a class="header-anchor" href="#交叉编译-coremark" aria-label="Permalink to &quot;交叉编译 Coremark&quot;">​</a></h2><ol><li><p>下载 Coremark</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/eembc/coremark.git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/eembc/coremark.git</span></span></code></pre></div></li><li><p>交叉编译 Coremark</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">coremark</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rv64</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">simple/</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rv64/</span></span>
<span class="line"><span style="color:#B392F0;">sed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;s/ee_u32         ee_ptr_int/unsigned long long         ee_ptr_int/g&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rv64/core_portme.h</span></span>
<span class="line"><span style="color:#B392F0;">make</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">compile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PORT_DIR=rv64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CC=</span><span style="color:#E1E4E8;">$riscv64</span><span style="color:#9ECBFF;">-ruyi-linux-gnu-gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">LD=</span><span style="color:#E1E4E8;">$riscv64</span><span style="color:#9ECBFF;">-ruyi-linux-gnu-gcc</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">XCFLAGS=&quot;-march=</span><span style="color:#E1E4E8;">$rv64gc</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">coremark</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rv64</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">simple/</span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rv64/</span></span>
<span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s/ee_u32         ee_ptr_int/unsigned long long         ee_ptr_int/g&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rv64/core_portme.h</span></span>
<span class="line"><span style="color:#6F42C1;">make</span><span style="color:#24292E;"> </span><span style="color:#032F62;">compile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PORT_DIR=rv64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CC=</span><span style="color:#24292E;">$riscv64</span><span style="color:#032F62;">-ruyi-linux-gnu-gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">LD=</span><span style="color:#24292E;">$riscv64</span><span style="color:#032F62;">-ruyi-linux-gnu-gcc</span><span style="color:#24292E;"> </span><span style="color:#032F62;">XCFLAGS=&quot;-march=</span><span style="color:#24292E;">$rv64gc</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>编译成功会看到 coremark 目录下生成了 coremark.exe，将 coremark.exe 拷贝到我们的 riscv 开发板或者 Qemu 上就可以运行了。</p></li></ol>`,6),e=[p];function r(c,t,i,y,E,F){return a(),o("div",null,e)}const h=s(l,[["render",r]]);export{d as __pageData,h as default};
